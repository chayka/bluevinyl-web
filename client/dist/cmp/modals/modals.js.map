{"version":3,"sources":["cmp/modals/modals.js"],"names":["Vue","component","props","data","visible","width","show","title","buttons","cls","methods","this","open","hide","payload","$emit","close","created","computed","content","height","queue","length","modal","defaults","push","Object","assign","$set","shift","$forceUpdate","alert","message","arguments","undefined","okCallback","text","click","confirm","yesCallback","$modals"],"mappings":"YAAAA,KAAIC,UAAU,SACVC,OAAQ,UAAW,QAAS,SAAU,QAAS,UAAW,OAD1DD,SAAAA,0iCAyBIE,KAAA,WAAA,OARAC,SAAS,EACTC,MAAO,QAUPC,OAJK,OAKDC,MAAA,GACHC,WARDC,IAAK,KAULC,SAIIJ,KAJJ,WARKK,KAAAP,SAAA,GAWLQ,KAHA,WAIID,KAAKL,QAQTO,KAZA,SAYKC,SACDH,KAAKP,SAAU,EACfO,KAAKI,MAAM,OAAQD,SAAW,YAQlCE,MAtBA,SAsBMF,SASVb,KAAUY,KAAdC,WAcQG,QA7Ee,eA+DvBjB,IAAIC,UAAU,UAmBViB,SAAAA,gfAYIZ,KA/BgB,WAgCZ,OACIa,WAIAd,UACAe,MADAf,WALW,MAAfM,MAAAU,MAAAC,OAAAX,KAAAU,MAAA,GAAA,OAUAX,SAXJJ,KAWI,SAXCiB,OACD,GAAIC,WARHL,QAAA,GA2BDZ,MAAUgB,GA3BTf,WAYGC,OACAJ,MAAO,QAiBfe,OAAA,OAdIT,MAAKU,MAAMI,KAAKC,OAAOC,OAAOH,SAAUD,QAhBvCZ,KAAAiB,KAAAjB,KAAA,QAiCEA,KAAAU,OACHV,KAAKU,gBARTT,KARI,SAQCW,OAgBLP,KA1CKV,KAAAiB,QAiCLV,KAfI,WAgBAF,KAAKU,MAAMQ,QACXlB,KAAKiB,KAAKjB,KAAM,QAASA,KAAKU,OAC9BV,KAAKmB,gBAkBoCd,MApCzC,WAyBAL,KAAKE,QAWTkB,MApCI,SAoCEC,SAAuC,GAA9BzB,OAA8B0B,UAAAX,OAAA,GAAAY,SAAAD,UAAA,GAAAA,UAAA,GAAtB,GAAIE,WAAkBF,UAAAX,OAAA,GAAAY,SAAAD,UAAA,GAAAA,UAAA,GAAL,IACpCtB,MAAKL,MAWTa,QAAAa,QATQzB,MAAOA,MACPE,KAAM,QAAS,YACfD,UACI4B,KAAM,KACNC,MAAOF,gBAkBDG,QA7Dd,SA6DcN,SAEP,GAAAzB,OAAA0B,UAAAX,OAAA,GAAAY,SAAAD,UAAA,GAAAA,UAAA,GAAA,GAAAM,YAAAN,UAAAX,OAAA,GAAAY,SAAAD,UAAA,GAAAA,UAAA,GAAA,IACCG,MAAAA,MACAC,QAAAA,QAFD9B,MAFMA,MAJbE,KAAA,UAAA,YAWHD,UA9Ge4B,KAAA,OAAAA,KAAA,MAmHhBC,MAAkBG,kBADtBvB,QAlHoB,WAmHhBjB,IAAIwC,QAAUxC,IAAIwC,SAAW7B","file":"modals.js","sourcesContent":["Vue.component('modal', {\n    props: ['visible', 'width', 'height', 'title', 'buttons', 'cls'],\n    template: ` <div class=\"surge-modals-fader\" v-if=\"visible\" @click.self=\"hide('close')\">\n                    <div :class=\"['modals-modal'].concat(cls || '').join(' ')\" :style=\"{width: width || '', height: height || ''}\">\n                        <div class=\"modal_header\">\n                            <div class=\"modal_header-title\">{{title}}</div>\n                            <div class=\"modal_header-close\" @click=\"hide('close')\">&times;</div>\n                        </div>\n                        <div class=\"modal_body\"><slot></slot></div>\n                        <div class=\"modal_buttons\" v-if=\"buttons && buttons.length\">\n                            <button v-for=\"button of buttons\"\n                                    @click.prevent=\"button.persist || hide(button.value!==undefined? button.value : button.text); button.click && button.click();\"\n                                    :class=\"['button'].concat(button.cls).join(' ')\">{{button.text}}</button>\n                        </div>\n                    </div>\n                </div>`,\n    data: () => ({\n        visible: false,\n        width: '300px',\n        height: 'auto',\n        title: '',\n        buttons: [],\n        cls: '',\n    }),\n    methods: {\n        /**\n         * Show modal\n         */\n        show(){\n            this.visible = true;\n        },\n\n        /**\n         * Show modal (alias)\n         */\n        open(){\n            this.show();\n        },\n\n        /**\n         * Hide modal\n         *\n         * @param payload\n         */\n        hide(payload){\n            this.visible = false;\n            this.$emit('hide', payload || 'unknown');\n        },\n\n        /**\n         * Hide modal (alias)\n         *\n         * @param payload\n         */\n        close(payload){\n            this.hide(payload);\n        }\n    },\n    created(){\n\n    }\n});\n\nVue.component('modals', {\n    template: ` <div class=\"modals\">\n                    <modal ref=\"modal\" v-for=\"(modal, i) in queue\"\n                       :title=\"modal.title\"\n                       :buttons=\"modal.buttons\"\n                       :cls=\"modal.cls\"\n                       :width=\"modal.width\"\n                       :height=\"modal.height\"\n                       :visible=\"!i\" \n                       @hide=\"close()\">\n                        {{modal.content}}\n                    </modal>\n                </div>`,\n    data(){\n        return {\n            queue: []\n        }\n    },\n\n    computed: {\n        modal(){\n            return this.queue.length ? this.queue[0] : null;\n        }\n    },\n    methods: {\n\n        /**\n         * Add an item to a queue and thus show a modal window.\n         *\n         * @param {object} modal\n         */\n        show(modal) {\n            let defaults = {\n                content: '',\n                title: '',\n                buttons: [],\n                cls: [],\n                width: '300px',\n                height: 'auto',\n            };\n            this.queue.push(Object.assign(defaults, modal));\n            this.$set(this, 'queue', this.queue);\n            this.$forceUpdate();\n        },\n\n        /**\n         * Alias to show\n         *\n         * @param modal\n         */\n        open(modal){\n            this.show(modal);\n        },\n\n        /**\n         * Close current modal popup, by shifting queue\n         */\n        hide() {\n            this.queue.shift();\n            this.$set(this, 'queue', this.queue);\n            this.$forceUpdate();\n        },\n\n        /**\n         * Alias to hide\n         */\n        close() {\n            this.hide();\n        },\n\n        /**\n         * Show alert box - a message with 'Ok' button.\n         * Callback is called when Ok is clicked.\n         *\n         * @param message\n         * @param title\n         * @param okCallback\n         */\n        alert(message, title = '', okCallback = null){\n            this.show({\n                content: message,\n                title: title,\n                cls: ['alert', 'pre-line'],\n                buttons: [{\n                    text: 'Ok',\n                    click: okCallback\n                }]\n            });\n        },\n\n        /**\n         * Show confirm box - a message with 'Yes' & 'No' buttons.\n         * Callback is called when 'Yes' is clicked.\n         *\n         * @param message\n         * @param title\n         * @param yesCallback\n         */\n        confirm(message, title = '', yesCallback = null){\n            this.show({\n                content: message,\n                title: title,\n                cls: ['confirm', 'pre-line'],\n                buttons: [{\n                    text: 'No',\n                }, {\n                    text: 'Yes',\n                    click: yesCallback\n                }]\n            });\n        }\n\n    },\n\n    created(){\n        Vue.$modals = Vue.$modals || this;\n    }\n});"]}